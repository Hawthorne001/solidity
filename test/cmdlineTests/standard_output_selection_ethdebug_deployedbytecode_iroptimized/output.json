{
    "contracts": {
        "a.sol": {
            "A1": {
                "evm": {
                    "deployedBytecode": {
                        "ethdebug": {}
                    }
                },
                "irOptimized": "/// ethdebug: enabled
/// @use-src 0:\"a.sol\"
object \"A1_14\" {
    code {
        {
            /// @src 0:58:123  \"contract A1 { function a(uint x) public pure { assert(x > 0); } }\"
            mstore(64, memoryguard(0x80))
            if callvalue()
            {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            }
            let _1 := allocate_unbounded()
            codecopy(_1, dataoffset(\"A1_14_deployed\"), datasize(\"A1_14_deployed\"))
            return(_1, datasize(\"A1_14_deployed\"))
        }
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
    }
    /// @use-src 0:\"a.sol\"
    object \"A1_14_deployed\" {
        code {
            {
                /// @src 0:58:123  \"contract A1 { function a(uint x) public pure { assert(x > 0); } }\"
                mstore(64, memoryguard(0x80))
                if iszero(lt(calldatasize(), 4))
                {
                    let selector := shift_right_unsigned(calldataload(0))
                    switch selector
                    case 0xf0fdf834 { external_fun_a() }
                    default { }
                }
                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            }
            function shift_right_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function cleanup_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_uint256(value)
            {
                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_uint256(value)
            }
            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                let offset := 0
                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)
            }
            function abi_encode_tuple(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_a()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param := abi_decode_tuple_uint256(4, calldatasize())
                fun_a(param)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function cleanup_rational_by(value) -> cleaned
            { cleaned := value }
            function identity(value) -> ret
            { ret := value }
            function convert_rational_by_to_uint256(value) -> converted
            {
                converted := cleanup_uint256(identity(cleanup_rational_by(value)))
            }
            function panic_error_0x01()
            {
                mstore(0, shl(224, 0x4e487b71))
                mstore(4, 0x01)
                revert(0, 0x24)
            }
            function assert_helper(condition)
            {
                if iszero(condition) { panic_error_0x01() }
            }
            /// @ast-id 13 @src 0:72:121  \"function a(uint x) public pure { assert(x > 0); }\"
            function fun_a(var_x)
            {
                /// @src 0:112:113  \"x\"
                let _1 := var_x
                let expr := _1
                /// @src 0:116:117  \"0\"
                let expr_1 := 0x00
                /// @src 0:112:117  \"x > 0\"
                let expr_2 := gt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))
                /// @src 0:105:118  \"assert(x > 0)\"
                assert_helper(expr_2)
            }
        }
        data \".metadata\" hex\"<BYTECODE REMOVED>\"
    }
}
"
            },
            "A2": {
                "evm": {
                    "deployedBytecode": {
                        "ethdebug": {}
                    }
                },
                "irOptimized": "/// ethdebug: enabled
/// @use-src 0:\"a.sol\"
object \"A2_27\" {
    code {
        {
            /// @src 0:124:189  \"contract A2 { function a(uint x) public pure { assert(x > 0); } }\"
            mstore(64, memoryguard(0x80))
            if callvalue()
            {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            }
            let _1 := allocate_unbounded()
            codecopy(_1, dataoffset(\"A2_27_deployed\"), datasize(\"A2_27_deployed\"))
            return(_1, datasize(\"A2_27_deployed\"))
        }
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
    }
    /// @use-src 0:\"a.sol\"
    object \"A2_27_deployed\" {
        code {
            {
                /// @src 0:124:189  \"contract A2 { function a(uint x) public pure { assert(x > 0); } }\"
                mstore(64, memoryguard(0x80))
                if iszero(lt(calldatasize(), 4))
                {
                    let selector := shift_right_unsigned(calldataload(0))
                    switch selector
                    case 0xf0fdf834 { external_fun_a() }
                    default { }
                }
                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            }
            function shift_right_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function cleanup_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_uint256(value)
            {
                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_uint256(value)
            }
            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                let offset := 0
                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)
            }
            function abi_encode_tuple(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_a()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param := abi_decode_tuple_uint256(4, calldatasize())
                fun_a(param)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function cleanup_rational_by(value) -> cleaned
            { cleaned := value }
            function identity(value) -> ret
            { ret := value }
            function convert_rational_by_to_uint256(value) -> converted
            {
                converted := cleanup_uint256(identity(cleanup_rational_by(value)))
            }
            function panic_error_0x01()
            {
                mstore(0, shl(224, 0x4e487b71))
                mstore(4, 0x01)
                revert(0, 0x24)
            }
            function assert_helper(condition)
            {
                if iszero(condition) { panic_error_0x01() }
            }
            /// @ast-id 26 @src 0:138:187  \"function a(uint x) public pure { assert(x > 0); }\"
            function fun_a(var_x)
            {
                /// @src 0:178:179  \"x\"
                let _1 := var_x
                let expr := _1
                /// @src 0:182:183  \"0\"
                let expr_1 := 0x00
                /// @src 0:178:183  \"x > 0\"
                let expr_2 := gt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))
                /// @src 0:171:184  \"assert(x > 0)\"
                assert_helper(expr_2)
            }
        }
        data \".metadata\" hex\"<BYTECODE REMOVED>\"
    }
}
"
            }
        },
        "b.sol": {
            "A1": {
                "evm": {
                    "deployedBytecode": {
                        "ethdebug": {}
                    }
                },
                "irOptimized": "/// ethdebug: enabled
/// @use-src 1:\"b.sol\"
object \"A1_42\" {
    code {
        {
            /// @src 1:58:123  \"contract A1 { function b(uint x) public pure { assert(x > 0); } }\"
            mstore(64, memoryguard(0x80))
            if callvalue()
            {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            }
            let _1 := allocate_unbounded()
            codecopy(_1, dataoffset(\"A1_42_deployed\"), datasize(\"A1_42_deployed\"))
            return(_1, datasize(\"A1_42_deployed\"))
        }
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
    }
    /// @use-src 1:\"b.sol\"
    object \"A1_42_deployed\" {
        code {
            {
                /// @src 1:58:123  \"contract A1 { function b(uint x) public pure { assert(x > 0); } }\"
                mstore(64, memoryguard(0x80))
                if iszero(lt(calldatasize(), 4))
                {
                    let selector := shift_right_unsigned(calldataload(0))
                    switch selector
                    case 0xcd580ff3 { external_fun_b() }
                    default { }
                }
                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            }
            function shift_right_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function cleanup_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_uint256(value)
            {
                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_uint256(value)
            }
            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                let offset := 0
                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)
            }
            function abi_encode_tuple(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_b()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param := abi_decode_tuple_uint256(4, calldatasize())
                fun_b(param)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function cleanup_rational_by(value) -> cleaned
            { cleaned := value }
            function identity(value) -> ret
            { ret := value }
            function convert_rational_by_to_uint256(value) -> converted
            {
                converted := cleanup_uint256(identity(cleanup_rational_by(value)))
            }
            function panic_error_0x01()
            {
                mstore(0, shl(224, 0x4e487b71))
                mstore(4, 0x01)
                revert(0, 0x24)
            }
            function assert_helper(condition)
            {
                if iszero(condition) { panic_error_0x01() }
            }
            /// @ast-id 41 @src 1:72:121  \"function b(uint x) public pure { assert(x > 0); }\"
            function fun_b(var_x)
            {
                /// @src 1:112:113  \"x\"
                let _1 := var_x
                let expr := _1
                /// @src 1:116:117  \"0\"
                let expr_1 := 0x00
                /// @src 1:112:117  \"x > 0\"
                let expr_2 := gt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))
                /// @src 1:105:118  \"assert(x > 0)\"
                assert_helper(expr_2)
            }
        }
        data \".metadata\" hex\"<BYTECODE REMOVED>\"
    }
}
"
            },
            "B2": {
                "evm": {
                    "deployedBytecode": {
                        "ethdebug": {}
                    }
                },
                "irOptimized": "/// ethdebug: enabled
/// @use-src 1:\"b.sol\"
object \"B2_55\" {
    code {
        {
            /// @src 1:124:189  \"contract B2 { function b(uint x) public pure { assert(x > 0); } }\"
            mstore(64, memoryguard(0x80))
            if callvalue()
            {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            }
            let _1 := allocate_unbounded()
            codecopy(_1, dataoffset(\"B2_55_deployed\"), datasize(\"B2_55_deployed\"))
            return(_1, datasize(\"B2_55_deployed\"))
        }
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
    }
    /// @use-src 1:\"b.sol\"
    object \"B2_55_deployed\" {
        code {
            {
                /// @src 1:124:189  \"contract B2 { function b(uint x) public pure { assert(x > 0); } }\"
                mstore(64, memoryguard(0x80))
                if iszero(lt(calldatasize(), 4))
                {
                    let selector := shift_right_unsigned(calldataload(0))
                    switch selector
                    case 0xcd580ff3 { external_fun_b() }
                    default { }
                }
                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            }
            function shift_right_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function cleanup_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_uint256(value)
            {
                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_uint256(value)
            }
            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                let offset := 0
                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)
            }
            function abi_encode_tuple(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_b()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param := abi_decode_tuple_uint256(4, calldatasize())
                fun_b(param)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function cleanup_rational_by(value) -> cleaned
            { cleaned := value }
            function identity(value) -> ret
            { ret := value }
            function convert_rational_by_to_uint256(value) -> converted
            {
                converted := cleanup_uint256(identity(cleanup_rational_by(value)))
            }
            function panic_error_0x01()
            {
                mstore(0, shl(224, 0x4e487b71))
                mstore(4, 0x01)
                revert(0, 0x24)
            }
            function assert_helper(condition)
            {
                if iszero(condition) { panic_error_0x01() }
            }
            /// @ast-id 54 @src 1:138:187  \"function b(uint x) public pure { assert(x > 0); }\"
            function fun_b(var_x)
            {
                /// @src 1:178:179  \"x\"
                let _1 := var_x
                let expr := _1
                /// @src 1:182:183  \"0\"
                let expr_1 := 0x00
                /// @src 1:178:183  \"x > 0\"
                let expr_2 := gt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))
                /// @src 1:171:184  \"assert(x > 0)\"
                assert_helper(expr_2)
            }
        }
        data \".metadata\" hex\"<BYTECODE REMOVED>\"
    }
}
"
            }
        }
    },
    "ethdebug": {
        "sources": [
            "a.sol",
            "b.sol"
        ]
    },
    "sources": {
        "a.sol": {
            "id": 0
        },
        "b.sol": {
            "id": 1
        }
    }
}
